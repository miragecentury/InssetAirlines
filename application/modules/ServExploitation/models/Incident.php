<?php

class ServExploitation_Model_Incident
{

    //--------------------------------------------------------------------------
    //Attributs
    //--------------------------------------------------------------------------
    /**
     * id de l'incident
     * @var int
     */
    protected $_noIncident;

    /**
     * date de l'incident
     * @var string
     */
    protected $_dateIncident;

    /**
     * label de l'aeroport d'arrivÃ©e de secours
     * @var int
     */
    protected $_noAeroportArriNextIncident;

    /**
     * numero du vol
     * @var int
     */
    protected $_noVol;

    /**
     * label du type de l'incident
     * @var int
     */
    protected $_idTypeIncident;

    /**
     * Mapper de l'objet
     * @var ServExploitation_Model_TypeIncidentMapper
     */
    private $_mapper;

    /**
     * Constructeur
     * @return void
     * @author charles
     */
    public function __construct()
    {
        $this->_mapper = Spesx_Mapper_MapperFactory::getMapper("ServExploitation_Model_Incident");
    }

    //--------------------------------------------------------------------------
    // Methodes
    //--------------------------------------------------------------------------

    /**
     * Ajoute ou modifie un incident dans la BD.
     *
     * @author charles
     * @access public
     */
    public function addIncident()
    {
        $this->_mapper->save($this, 'noIncident');
    }

    /**
     * Suprime un Incident a partir de son noIncident
     *
     * @author charles
     * @access public
     * @param string $noIncident
     *
     */
    public function delIncident($noIncident)
    {
        try {
            $this->_mapper->delete('noIncident', $noIncident);
        } catch (Zend_Exception $e) {
            echo 'ServExploitation_Models_Incident_delIncident() 
                Exception - ' .
            $e->getMessage() . ' - ' . $e->getPrevious();
        }
    }

    /**
     * Retourne un Incident a partir de son noIncident,
     * S'il n'existe pas retourne null
     * 
     * @access public
     * @author charles
     * @param int $noIncident
     * @return null|ServExploitation_Model_Incident
     *  
     */
    public function getIncident($noIncident)
    {
        return $this->_mapper->find($noIncident);
    }

    /**
     * Retourne tous les incidents, null si il n'y en as pas dans la BD.
     * 
     * @access public
     * @author charles
     * @return null|array(Application_Model_Incident)
     *  
     */
    public static function getListeIncident()
    {
        $mapper = Spesx_Mapper_MapperFactory::getMapper("ServExploitation_Model_Incident");
        try {
            return $mapper->findAll();
        } catch (Spesx_Mapper_Exception $e) {
            echo $e->getMessage() . " - " . $e->getPrevious()->getMessage();
        }
    }

    //--------------------------------------------------------------------------
    // Getter / setter
    //--------------------------------------------------------------------------
    public function get_noIncident()
    {
        return $this->_noIncident;
    }

    public function set_noIncident($_noIncident)
    {
        $this->_noIncident = $_noIncident;
        return $this;
    }

    public function get_dateIncident()
    {
        return $this->_dateIncident;
    }

    public function set_dateIncident($_dateIncident)
    {
        $this->_dateIncident = $_dateIncident;
        return $this;
    }

    public function get_labelAeroportArriNextIncident()
    {
        $item = new Application_Model_Aeroport;
        $item = $item->getAeroport($this->get_noAeroportArriNextIncident());
        if ($item != null)
            return $item->get_labelAeroport();
        return "Aeroport Incorect";
    }

    public function get_noAeroportArriNextIncident()
    {
        return $this->_noAeroportArriNextIncident;
    }

    public function set_noAeroportArriNextIncident($_noAeroportArriNextIncident)
    {
        $this->_noAeroportArriNextIncident = $_noAeroportArriNextIncident;
        return $this;
    }

    public function get_noVol()
    {
        return $this->_noVol;
    }

    public function set_noVol($_noVol)
    {
        $this->_noVol = $_noVol;
        return $this;
    }

    public function get_idTypeIncident()
    {
        return $this->_idTypeIncident;
    }

    public function set_idTypeIncident($_idTypeIncident)
    {
        $this->_idTypeIncident = $_idTypeIncident;
    }

    public function get_labelTypeIncident()
    {
        $item = new ServExploitation_Model_TypeIncident;
        $item = $item->getTypeIncident($this->get_idTypeIncident());
        if ($item != null)
            return $item->get_labelTypeIncident();
        return "Type Incorect";
    }

}

?>
