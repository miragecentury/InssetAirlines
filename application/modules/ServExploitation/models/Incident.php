<?php

class ServExploitation_Model_Incident
{

    //--------------------------------------------------------------------------
    //Attributs
    //--------------------------------------------------------------------------
    /**
     * id de l'incident
     * @var int
     */
    protected $_noIncident;

    /**
     * date de l'incident
     * @var string
     */
    protected $_dateIncident;

    /**
     * label de l'aeroport d'arrivée de secours
     * @var int
     */
    protected $_noAeroportArriNextIncident;

    /**
     * numero du vol
     * @var int
     */
    protected $_noVol;

    /**
     * label du type de l'incident
     * @var int
     */
    protected $_idTypeIncident;

    /**
     * Mapper de l'objet
     * @var ServExploitation_Model_TypeIncidentMapper
     */
    private $_mapper;

    /**
     * Constructeur
     * @return void
     * @author charles
     */
    public function __construct()
    {
        $this->_mapper = Spesx_Mapper_MapperFactory::getMapper( "ServExploitation_Model_Incident" );
    }

    //--------------------------------------------------------------------------
    // Methodes
    //--------------------------------------------------------------------------
    /**
     * Function de mises à jours des listes d'incidents à chaque changement de semaines
     * -> S+4 devient S+3, et ainsi de suite (S est supprimé, decompte jusqu'a S+1)
     *
     * @author pewho
     * @access public
     * @static
     * @return true|false
     */
    public static function changementSemaine()
    {
        $mapper = Spesx_Mapper_MapperFactory::getMapper( "ServExploitation_Model_Incident" );
        //appel de la methode rotate, MAJ
        $return = $mapper->rotateVarListe();
        if ( $return ) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Fonction de mise à jour manuelle des differents incidents dans les listes
     * Au cas où
     *
     * @access public
     * @static
     * @author pewho
     * @return true|false
     */
    public static function refreshVarListIncidents()
    {
        return ServExploitation_Model_Incident::changementSemaine();
    }

    //--------------------------------------------------------------------------

    /**
     * Ajoute ou modifie un incident dans la BD.
     *
     * @author charles
     * @access public
     */
    public function addIncident()
    {
        $this->_mapper->save( $this, 'noIncident' );

        //Stockage de l'ancien incident (en cas de modification de type
        //d'incident) si pas d'incident il récupere null
        $old = new ServExploitation_Model_Incident();
        $old = $old->getIncident( $this->get_noIncident() );

        //Recuperation du vol a partir de l'incident
        $vol = new ServPlaning_Model_Vol;
        $vol = $vol->getVol( $this->get_noVol() );

        //model pour récupérer les type d'incident
        $typeIncident = new ServExploitation_Model_TypeIncident;

        //Recupération du type d'incident actuel
        $tithis = $typeIncident->getTypeIncident( $this->get_idTypeIncident() );

        // Si il y avais un incident déja présent (update)
        if ( $old != null ) {
            //on récupere l'ancien type d'incident
            $tiold = $typeIncident->getTypeIncident( $old->get_idTypeIncident() );
            // On regarde si le temps de gestion de l'incident a changer
            if ( $tithis->get_dureeTypeIncident() != $tiold->get_dureeTypeIncident() ) {
                // retard en plus est de : tithis->tiold
                $vol->addRetard( $tithis->get_dureeTypeIncident() - $tiold->get_dureeTypeIncident(), 0 );
            }
        } else {
            // On regarde si le temps de gestion est différent de 0
            if ( $tithis->get_dureeTypeIncident() != 0 ) {
                // retard en plus est de tithis
                if ( $vol != null )
                    $vol->addRetard( $tithis->get_dureeTypeIncident(), 0 );
            }
        }
        //Pour gerer l'aéroport d'attérissage s'il change
        if ( $vol != null ) {
            if ( $this->get_noAeroportArriNextIncident() != $vol->get_noAeroportAtte() ) {
                $vol->set_noAeroportAtte( $this->get_noAeroportArriNextIncident() );
            }
        }
        // Stockage du numéro du vol dans une variable d'application pour
        // pouvoir faire un affichage des vols avec incidents rapidement.
        $var_app = Application_Model_ApplicationVar::get( 'LstVolInIncident' );
        if ( $var_app == null )
            $var_app = Array( );
        $var_app[ $this->get_noVol() ] = "";
        Application_Model_ApplicationVar::set( 'LstVolIncident', $var_app );
    }

    /**
     * Suprime un Incident a partir de son noIncident
     *
     * @author charles
     * @access public
     * @param string $noIncident
     *
     */
    public function delIncident( $noIncident )
    {
        try {
            $this->_mapper->delete( 'noIncident', $noIncident );
        } catch ( Zend_Exception $e ) {
            echo 'ServExploitation_Models_Incident_delIncident()
                Exception - ' .
            $e->getMessage() . ' - ' . $e->getPrevious();
        }
    }

    /**
     * Retourne un Incident a partir de son noIncident,
     * S'il n'existe pas retourne null
     *
     * @access public
     * @author charles
     * @param int $noIncident
     * @return null|ServExploitation_Model_Incident
     *
     */
    public function getIncident( $noIncident )
    {
        return $this->_mapper->find( $noIncident );
    }

    /**
     * Retourne tous les incidents, null si il n'y en as pas dans la BD.
     *
     * @access public
     * @author charles
     * @return null|array(Application_Model_Incident)
     *
     */
    public static function getListeIncident()
    {
        $mapper = Spesx_Mapper_MapperFactory::getMapper( "ServExploitation_Model_Incident" );
        try {
            return $mapper->findAll();
        } catch ( Spesx_Mapper_Exception $e ) {
            echo $e->getMessage() . " - " . $e->getPrevious()->getMessage();
        }
    }

    //--------------------------------------------------------------------------
    // Getter / setter
    //--------------------------------------------------------------------------
    public function get_noIncident()
    {
        return $this->_noIncident;
    }

    public function set_noIncident( $_noIncident )
    {
        $this->_noIncident = $_noIncident;
        return $this;
    }

    public function get_dateIncident()
    {
        return $this->_dateIncident;
    }

    public function set_dateIncident( $_dateIncident )
    {
        $this->_dateIncident = $_dateIncident;
        return $this;
    }

    public function get_labelAeroportArriNextIncident()
    {
        $item = new Application_Model_Aeroport;
        $item = $item->getAeroport( $this->get_noAeroportArriNextIncident() );
        if ( $item != null )
            return $item->get_labelAeroport();
        return "Aeroport Incorect";
    }

    public function get_noAeroportArriNextIncident()
    {
        return $this->_noAeroportArriNextIncident;
    }

    public function set_noAeroportArriNextIncident( $_noAeroportArriNextIncident )
    {
        $this->_noAeroportArriNextIncident = $_noAeroportArriNextIncident;
        return $this;
    }

    public function get_noVol()
    {
        return $this->_noVol;
    }

    public function set_noVol( $_noVol )
    {
        $this->_noVol = $_noVol;
        return $this;
    }

    public function get_idTypeIncident()
    {
        return $this->_idTypeIncident;
    }

    public function set_idTypeIncident( $_idTypeIncident )
    {
        $this->_idTypeIncident = $_idTypeIncident;
    }

    public function get_labelTypeIncident()
    {
        $item = new ServExploitation_Model_TypeIncident;
        $item = $item->getTypeIncident( $this->get_idTypeIncident() );
        if ( $item != null )
            return $item->get_labelTypeIncident();
        return "Type Incorect";
    }

}

?>
