<?php

class ServExploitation_Model_IncidentMapper extends Spesx_Mapper_Mapper
{

    protected function _createItemFromRow( Zend_Db_Table_Row $row )
    {
        $item = new ServExploitation_Model_Incident();
        $item->set_noIncident( $row->noIncident )
            ->set_dateIncident( $row->dateIncident )
            ->set_noAeroportArriNextIncident( $row->noAeroportArriNextIncident )
            ->set_noVol( $row->noVol )
            ->set_idTypeIncident( $row->idTypeIncident );

        return $item;
    }

    protected function _getDataArrayFromItem( $item )
    {
        return array(
            'noIncident' => $item->get_noIncident(),
            'dateIncident' => $item->get_dateIncident(),
            'noAeroportArriNextIncident' => $item->get_noAeroportArriNextIncident(),
            'noVol' => $item->get_noVol(),
            'idTypeIncident' => $item->get_idTypeIncident(),
        );
    }

    /**
     * création / ajout d'items des / dans liste ApplicationVar
     *
     * @author pewho
     * @access public
     * @param ServExploitation_Model_Incident $item
     * @return true|false
     */
    public function addItemInVarList( ServExploitation_Model_Incident $item )
    {
        //But : construction d'un Array de structure :
        //ListIncident [VolsIncident][W][noVol] = noIncident
        //----------------------------------------------------
        //Recuperation du type d'incident
        $typeIncident = $item->get_idTypeIncident();

        //calcul de la semaine concernée
        $date = new DateTime( $item->get_dateIncident() );
        $semaine = ServPlaning_Model_Vol::getIntervalSemBetweenNowAndDate( $date );

        //recupération du noVol et du noIncident
        $noVol = $item->get_noVol();
        $noIncident = $item->get_noIncident();
        //initialisation si non existance de la liste concernée
        if ( !is_empty( Application_Model_ApplicationVar::get( 'ListIncident' ) ) ) {
            $ListIncident = Application_Model_ApplicationVar::get( 'ListIncident' );
        }
        //enregistrement (si existant, ecrasement (doit etre unique)
        $ListIncident[ $typeIncident ][ $semaine ][ $noVol ] = $noIncident;
        $return = Application_Model_ApplicationVar::set( 'ListIncident', $ListIncident );

        //finalisation
        if ( $return ) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * changement de semaine => rotation des listes automatique
     *
     * @author pewho
     * @return true|false
     * @access public
     */
    public function rotateVarListe()
    {
        //recuperation des incidents suivant les semaines concernées S+1 à S+4
        //enregistrement des Listes en BDD
        //recupération des dates butoirs
        //  ->$start : lundi S+1
        //  ->$stop : Dimanche S+4
        $start = ServPlaning_Model_Vol::getSemaineAheadFromCurrent(1);
        $stop = ServPlaning_Model_Vol::getFinSemaineAheadFromCurrent(1);
        //Selection
        try{
        $select = $this->getDbTable()->select()
            ->where("dateIncident > $start AND dateIncident < $stop");
        $rowset = $this->getDbTable()->fetchAll($select);
        $items = $this->_createItemsFromRowset($rowset);
        } catch (Zend_Db_Exception $e){
            Spesx_Log::LogERR('Incident, rotateVarListe, selection : ' . $e->getMessage());
            return false;
        }
        //Enregistrement de l'ancienne liste dans une variable de sauvegarde / debug   (Etat S-1)
            $listeIncidentDebug = Application_Model_ApplicationVar::get('ListeIncident');
            $returnDebug = Application_Model_ApplicationVar::set('ListeIncidentDebug', $listeIncidentDebug);
            if (!$returnDebug){
                Spesx_Log::LogWARN("La liste ListeIncidentDebug n'a pas été sauvée, erreur de BDD");
            }
        //Initialisation de la liste
        try{
            $ListeIncident = null;
            Application_Model_ApplicationVar::set('ListIncident', $ListeIncident);
        } catch (Zend_Db_Exception $e){
            Spesx_Log::LogERR('Incident, rotateVarListe,initialisationListe : ' . $e->getMessage());
            return false;
        }
        //enregistrement en BDD
        if(!is_empty($items)){
            $return = 0;
            $nbrItems = count($items);
            foreach($items as $item){
                $return += (INT) $this->addItemInVarList($item);
            }
            if ($return == $nbrItems){
                Spesx_Log::LogERR("L'enregistrement de la ListeIncident ne s'est pas effectué correctement");
                return true;
            }
            else {
                return false;
            }
        } else {
            Spesx_Log::LogWARN("Il ne semble pas y avoir d'incidents répertoriés entre S+1 et S+4,
                risque important de corruption de la BDD, table Incident");
            return false;
        }

    }


}

?>
