<?php

class ServExploitation_Model_TypeIncident
{

    //--------------------------------------------------------------------------
    //Attributs
    //--------------------------------------------------------------------------
    /**
     * Id du type incident
     * @var int
     */
    protected $_idTypeIncident;

    /**
     * label du type incident
     * @var string
     */
    protected $_labelTypeIncident;

    /**
     * Mapper de l'objet
     * @var ServExploitation_Model_TypeIncidentMapper
     */
    private $_mapper;

    /**
     * Constructeur
     * @return void
     * @author charles
     */
    public function __construct()
    {
        $this->_mapper = Spesx_Mapper_MapperFactory::getMapper("ServExploitation_Model_TypeIncident");
    }

    //--------------------------------------------------------------------------
    // Methodes
    //--------------------------------------------------------------------------

    /**
     * Ajoute un type d'incident.
     *
     * @author charles
     * @access public
     *
     */
    public function addTypeIncident()
    {
        $this->_mapper->save($this, 'idTypeIncident');
    }

    /**
     * Suprime un labelTypeIncident.
     *
     * @author charles
     * @access public
     * @param string $labelTypeIncident
     *
     */
    public function delTypeIncident($idTypeIncident)
    {
        try {
            $this->_mapper->delete('idTypeIncident', $idTypeIncident);
        } catch (Zend_Exception $e) {
            echo 'ServExploitation_Models_TypeIncident_delTypeIncident() 
                Exception - ' .
            $e->getMessage() . ' - ' . $e->getPrevious();
        }
    }

    /**
     * Retourne un Type d'incident a partir de son labelTypeIncident.
     * S'il n'existe pas, retourne null.
     * 
     * @access public
     * @author charles
     * @param string $labelTypeIncident
     * @return null|ServExploitation_Model_TypeIncident
     *  
     */
    public function getTypeIncident($idTypeIncident)
    {
        return $this->_mapper->find($idTypeIncident);
    }

    /**
     * Retourne un TypeIncident sous forme de tableau HTML
     * 
     * @access public
     * @author charles
     * @return string
     *  
     */
    public function getTypeIncidentHTML()
    {
        $TypeIncident = "<div>Id Incident : " . $this->get_idTypeIncident() . "</div>";
        $TypeIncident.= "<div>Label Incident : " . $this->get_labelTypeIncident() . "</div>";
        return $TypeIncident;
    }

    /**
     * Retourne tout les types d'incidents, 
     * null si il n'y en as pas dans la BD
     * 
     * @access public
     * @author charles
     * @return null|array(Application_Model_TypeIncident)
     *  
     */
    public static function getListeTypeIncident()
    {
        $mapper = Spesx_Mapper_MapperFactory::getMapper("ServExploitation_Model_TypeIncident");
        try {
            return $mapper->findAll();
        } catch (Spesx_Mapper_Exception $e) {
            echo $e->getMessage() . " - " . $e->getPrevious()->getMessage();
        }
        return $return;
    }

    /**
     * Retourne tous les incidents sous forme de tableau html, 
     * retourne une phrase disant qu'il n'y en a pas dans la bd si c'est le cas
     * 
     * @access public
     * @author charles
     * @return string
     *  
     */
    public static function getListeTypeIncidentHTML()
    {
        $allTypeIncident = ServExploitation_Model_TypeIncident::getListeTypeIncident();


        if (!empty($allTypeIncident)) {
            $tableau = "<table>
                        <tr>
                            <td>Id Type Incident</td>
                            <td>Label Type Incident</td>
                            <td></td>
                            <td></td>
                        </tr>";

            foreach ($allTypeIncident as $val) {
                $tableau .= "<tr>
                                <td>" . $val->get_idTypeIncident() . "</td>
                                <td>" . $val->get_labelTypeIncident() . "</td>
                                <td><a href='/ServExploitation/Typeincident/upd?id=" . $val->get_idTypeIncident() . "'>Modifier</a></td>
                                <td><a href='/ServExploitation/Typeincident/del?id=" . $val->get_idTypeIncident() . "'>Supprimer</a></td>
                            </tr>";
            }
            $tableau .= "</table>";
        } else {
            $tableau = "<div>Il n'y a pas de Type d'incident dans la base de donn√©e</div>";
        }
        return $tableau;
    }

    /**
     * Retourne tous les type d'incident sous forme de select,
     * retourne un select vide s'il n'y en a pas
     * 
     * @access public
     * @author charles
     * @param string $name, string $label
     * @return Zend_Form_Element_Select
     *  
     */
    public static function getSelectTypeIncident($name, $label)
    {
        try {
            $TypeIncidents = ServExploitation_Model_TypeIncident::getListeTypeIncident();
            $labelTypeIncident = new Zend_Form_Element_Select($name);
            foreach ($TypeIncidents as $TypeIncident) {
                $labelTypeIncident->addMultiOption($TypeIncident->get_labelTypeIncident(), $TypeIncident->get_labelTypeIncident());
            }
            $labelTypeIncident->setRequired();
            $labelTypeIncident->setLabel($label);
            return $labelTypeIncident;
        } catch (Spesx_Mapper_Exception $e) {
            echo $e->getMessage() . " - " . $e->getPrevious()->getMessage();
        }
    }

    //--------------------------------------------------------------------------
    // Getter / setter
    //--------------------------------------------------------------------------
    public function get_idTypeIncident()
    {
        return $this->_idTypeIncident;
    }

    public function set_idTypeIncident($_idTypeIncident)
    {
        $this->_idTypeIncident = $_idTypeIncident;
        return $this;
    }

    public function get_labelTypeIncident()
    {
        return $this->_labelTypeIncident;
    }

    public function set_labelTypeIncident($_labelTypeIncident)
    {
        $this->_labelTypeIncident = $_labelTypeIncident;
        return $this;
    }

}

?>
